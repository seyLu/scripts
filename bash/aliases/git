#! /bin/bash

alias branch="reload; git branch --show-current"
alias gm="git reset --hard; git checkout main"

# Git branch with status colors
function parse_git_branch() {
    local -r branch=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

    if [[ -n "${branch}" ]]; then
        local git_status
        git_status=$(git status --porcelain 2>/dev/null)

        if [[ -n "${git_status}" ]]; then
            printf '%s' "(${branch}"
            printf '%s' "${YELLOW}*${END_COLOR}${RED})"
        else
            printf '%s' "(${branch})"
        fi
    fi
}

# simplify git for solo development
function g() {
    if [[ $# -eq 1 ]]; then
        git add .
        git commit -m "$@"

        if [[ "$(branch)" == "main" ]]; then
            git push
        else
            git push --set-upstream origin "$(branch)"
        fi
    else
        printf '\n'
        printf '%s\n' "Usage:"
        printf '%s\n' "  Current directory must be a repo"
        printf '\n'
        printf '%s\n' "Args:"
        printf '%s\n' "  Commit Message"
        printf '\n'
        printf '%s\n' "Example:"
        printf '%s\n' "  g \"<commit_message>\""
        printf '\n'
    fi
}

# simplify git add
function ga() {
    if [[ $# -gt 0 ]]; then
        git add "$@"
    else
        git add .
    fi
}

# simplify git commit
alias gc="git commit -m"

# simplify git push, pull
alias gp="git push"
alias gl="git pull"

# simplify push to remote
function gu() { [[ ! -z "$(branch)" ]] && git push --set-upstream origin "$(branch)"; }

# simplify working with git branch
function gb() {
    reload

    if [[ $# -gt 0 ]]; then
        local options
        options=$(getopt -o lc:s:S:f:d:m: --long list,create:,switch:,smart-switch:,find:,delete:,move: -- "$@")

        if [[ $? -ne 0 ]]; then
            log::error "incorrect options provided"
            return
        fi

        eval set -- "${options}"

        while [[ $# -gt 0 ]]; do
            case "$1" in
            -l | --list)
                git branch
                break
                ;;
            -c | --create)
                git reset --hard
                if [[ -z "$(git branch --list "$2")" ]]; then
                    git pull

                    git checkout main

                    git checkout -b "$2"
                else
                    git checkout "$2"
                fi
                break
                ;;
            -s | --switch)
                git reset --hard
                git checkout "$2"
                break
                ;;
            -S | --smart-switch)
                git reset --hard
                git checkout "$(gb -f "$2" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" | tr -d ' ')"
                break
                ;;
            -f | --find)
                git branch | grep --ignore-case "$2"
                break
                ;;
            -d | --delete)
                git branch -D "$2"
                break
                ;;
            -m | --move)
                if [[ $# -lt 4 ]]; then
                    git branch -m "$(branch)" "$2"
                else
                    git branch -m "$2" "$4"
                fi
                break
                ;;
            --)
                shift
                break
                ;;
            *)
                branch
                break
                ;;
            esac
        done
    else
        branch
    fi
}
