#! /bin/bash

source "${_SCRIPTS_PATH}/__init__"

[[ "$_DEBUG" == "true" ]] && set -x

#------------------------------------------------------------------------#
# Collection of Bukas.ph scripts
#------------------------------------------------------------------------#

work_path="$(extract_value_assoc "${_PATHS}" "work")/Erudifi"
declare -a valid_repos=(
    "mono-backend"
    "borrower-app"
)
repo=$(
    dir=$(basename "${PWD}")

    if [[ "${valid_repos[*]}" =~ ${dir} ]]; then
        printf '%s\n' "${dir}"
    else
        printf '%s\n' "${valid_repos[0]}"
    fi
)
readonly work_path
readonly valid_repos
readonly repo

function main() {
    [[ $# -eq 0 ]] && list_config && return

    choices "$@"
}

function choices() {
    local options
    options=$(
        getopt -o c:x:b:t:X,I --long change_dir:,start:,bash:,test:,stop,install -- "$@"
    )

    [[ $? -ne 0 ]] && {
        log::error "incorrect options provided"
        return
    }

    eval set -- "${options}"

    while [[ $# -gt 0 ]]; do
        case "$1" in
        -c | --change_dir)
            change_dir "${2,,}"
            break
            ;;
        -x | --start)
            docker_start "${2,,}"
            break
            ;;
        -b | --bash)
            docker_bash "${2,,}"
            break
            ;;
        -t | --test)
            docker_test "${2,,}"
            break
            ;;
        -X | --stop)
            docker_stop
            break
            ;;
        -I | --install)
            docker_install
            break
            ;;
        --)
            shift
            break
            ;;
        *)
            list_config
            break
            ;;
        esac
    done
}

function change_dir() {
    local repo_path="${work_path}/"

    case "$1" in
    be | mono-backend) repo_path+="mono-backend" ;;
    fe | borrower-app) repo_path+="borrower-app" ;;
    *)
        list_valid_repos
        return
        ;;
    esac

    gnome-terminal --working-directory="${repo_path}" --no-environment --tab
}

function docker_start() {
    local -r app=$(get_app "$1")
    if [[ -z "${app}" ]]; then
        list_config
        return
    fi

    case "${repo}" in
    mono-backend)
        docker-compose -f "docker-compose.${app}.yml" up -d
        ;;
    borrower-app)
        # shellcheck source=/dev/null
        . ~/.nvm/nvm.sh
        nvm use lts/gallium
        npm run dev:web
        ;;
    *)
        list_valid_repos
        return
        ;;
    esac
}

function docker_bash() {
    local -r backend=$(get_backend "$1")
    if [[ -z "${backend}" ]]; then
        list_config
        return
    fi

    docker-compose exec "${backend}" bash
}

function docker_test() {
    local backend
    backend=$(get_backend "$1")
    [[ -z "${backend}" ]] && {
        list_config
        return
    }

    docker-compose exec -T "${backend}" ./manage.py makemigrations --check
}

function docker_stop() { docker-compose down; }

function docker_install() {
    if [[ "${repo}" == "borrower-app" ]]; then
        docker-compose run expo npm install
    else
        echo
        printf '%s\n' "Nothing to install."
    fi
}

function get_app() {
    local app

    case "$1" in
    ph) app="bukas" ;;
    id) app="danacita" ;;
    esac

    printf '%s\n' "${app}"
}

function get_backend() {
    local backend

    case "$1" in
    ph) backend="backend" ;;
    id) backend="backend_danacita" ;;
    esac

    printf '%s\n' "${backend}"
}

function list_valid_repos() {
    echo
    for valid_repo in "${valid_repos[@]}"; do
        printf '%s\n' "  --> ${CYAN}${valid_repo}${END_COLOR}"
    done
}

function list_config() {
    read -rd "" details <<-EOF
\t
        ${RED}Company${END_COLOR}: Erudifi
        ---------------------
    -->    ${CYAN}Repo${END_COLOR}: ${repo}
EOF

    printf '%s\n' "${details}"
}

main "$@"

[[ "$_DEBUG" == "true" ]] && set +x
