#!/bin/bash

source "${_SCRIPTS_PATH}/__init__"

[[ "$_DEBUG" == "true" ]] && set -x

#------------------------------------------------------------------------#
# CIC dump snapshot from 6 months ago up to current day
#------------------------------------------------------------------------#

# Get the current year and month
YEAR=$(date +%Y)
MONTH=$(date +%m)
DAY=$(date +%d)
readonly YEAR
readonly MONTH
readonly DAY

function main() {
    [[ $# -eq 0 ]] && {
        dump_six_months
        return
    }

    dump_data_nth_month_ago "$1"
}

function dump_six_months() {
    # Loop over the past 6 months
    for ((i = 6; i >= 0; i--)); do
        dump_data_nth_month_ago "${i}"
    done
}

function dump_data_nth_month_ago() {
    i="$1"

    Y=$(date -d "${YEAR}-${MONTH}-${DAY} -${i} month" +%Y)
    M=$(date -d "${YEAR}-${MONTH}-${DAY} -${i} month" +%m)

    # Get the number of days for this month
    DAYS=$(cal $M $Y | awk 'NF {DAYS = $NF}; END {print DAYS}')

    # Loop over the days for this month
    for ((j = 1; j <= "${DAYS}"; j++)); do
        # Construct the date for this day
        DATE=$(date -d "${Y}-${M}-${j}" +%Y%m%d)

        # Check if the date is valid
        if [[ $(date -d "${DATE}" +%Y%m%d) -le $(date +%Y%m%d) ]]; then
            # Do something with the date
            cic -s "${DATE}"
        fi

        # Exit the loop if we reach the current date
        if [[ "${DATE}" == $(date +%Y%m%d) ]]; then
            exit 0
        fi
    done
}

main "$@"

[[ "$_DEBUG" == "true" ]] && set -x
